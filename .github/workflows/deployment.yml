---
name: 'Deployment'

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

'on':
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  cd:
    name: 'Deployment'
    runs-on: 'ubuntu-latest'
    # if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: 'Checkout Code'
        uses: 'actions/checkout@v2'

      - name: Set tag
        id: vars
        run: echo "::set-output name=tag::${GITHUB_REF#refs/*/}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@82ea2d2853906c3fe78152101e590fa6caeb5f82 # v1-node16
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          OIDC_ROLE_NAME: ${{ secrets.OIDC_ROLE_NAME }}
        with:
          role-to-assume: 'arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.OIDC_ROLE_NAME }}'
          role-session-name: 'oidc_${{ github.action }}'
          aws-region: ap-southeast-2

      - name: Set ENV variables from SSM Params
        uses: dkershner6/aws-ssm-getparameters-action@v1
        with:
          parameterPairs: |
            /ecs/runtime/tech_radar/google_client_id = CLIENT_ID,
            /ecs/runtime/tech_radar/google_api_key = API_KEY
          withDecryption: 'true' # defaults to true

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          docker build \
            --build-arg SHEET_ID="https://docs.google.com/spreadsheets/d/1s38CG6FvpcDcjEBI2eskb1-0u5Xvo0SGucFVbUXPP_E/edit" \
            --build-arg SHEET_NAME="Implementation" \
            --build-arg CLIENT_ID="$CLIENT_ID" \
            --build-arg API_KEY="$API_KEY" \
            --build-arg RINGS="[\"Deprecated\",\"Hold\",\"Assess\",\"Trial\",\"Adopt\",\"Require\"]"
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition tech_radar --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: tech_radar_container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
